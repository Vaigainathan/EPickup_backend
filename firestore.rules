rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Test collection - disabled for security
    match /test/{document} {
      allow read, write: if false;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.role == 'super_admin' || 
         request.auth.token.appType == 'admin' ||
         // Fallback: check if user exists in adminUsers collection
         exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid)) ||
         // Additional fallback: check users collection for admin users
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin'));
    }
    
    function isSuperAdmin() {
      return request.auth != null && 
        (request.auth.token.role == 'super_admin' ||
         // Fallback: check if user exists in adminUsers collection with super_admin role
         (exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid)) && 
          get(/databases/$(database)/documents/adminUsers/$(request.auth.uid)).data.role == 'super_admin'));
    }
    
    function isAdminUser() {
      return request.auth != null && 
        (request.auth.token.userType == 'admin' && 
         request.auth.token.role == 'super_admin') ||
        // Fallback: check adminUsers collection
        exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid));
    }
    
    // Removed unused canCreateAdminProfile function - admin creation is handled by backend
    
    function isDriver() {
      return request.auth != null && 
        (request.auth.token.role == 'driver' || 
         request.auth.token.appType == 'driver');
    }
    
    function isCustomer() {
      return request.auth != null && 
        (request.auth.token.role == 'customer' || 
         request.auth.token.appType == 'customer');
    }
    
    function isValidUserType() {
      return request.auth != null && 
        (request.auth.token.role in ['customer', 'driver', 'super_admin'] ||
         request.auth.token.appType in ['customer', 'driver', 'admin']);
    }
    
    function isValidPhoneNumber(phone) {
      return phone.matches('^\\+91[6-9][0-9]{9}$');
    }
    
    function isWithinServiceArea(location) {
      // Service area validation for Tirupattur region
      // Allow global customers but ensure pickup/delivery locations are within service area
      return location.latitude >= 12.0 && location.latitude <= 13.0 &&
             location.longitude >= 78.0 && location.longitude <= 79.0;
    }
    
    function isValidPickupDelivery(pickup, drop) {
      // Both pickup and delivery locations must be within service area
      return isWithinServiceArea(pickup.coordinates) && 
             isWithinServiceArea(drop.coordinates);
    }
    
    function isValidBookingStatus(status) {
      return status in ['pending', 'driver_assigned', 'accepted', 'driver_enroute', 
                       'driver_arrived', 'picked_up', 'in_transit', 'delivered', 
                       'completed', 'cancelled', 'rejected'];
    }
    
    function isValidDriverStatus(status) {
      return status in ['available', 'busy', 'offline', 'enroute', 'arrived'];
    }
    
    function isValidWorkSlotStatus(status) {
      return status in ['available', 'booked', 'completed', 'cancelled'];
    }
    
    function isValidNotificationType(type) {
      return type in ['booking_update', 'driver_assigned', 'payment_update', 'system_alert'];
    }
    
    function isValidVehicleType(vehicleType) {
      return vehicleType in ['motorcycle', 'electric'];
    }
    
    function isValidVehicleNumber(vehicleNumber) {
      return vehicleNumber is string && vehicleNumber.matches('^[A-Z]{2}[0-9]{2}[A-Z]{1,2}[0-9]{4}$');
    }
    
    function isValidLicenseNumber(licenseNumber) {
      return licenseNumber is string && licenseNumber.matches('^[A-Z]{2}[0-9]{2}[0-9]{4}[0-9]{7}$');
    }
    
    function isValidRCNumber(rcNumber) {
      return rcNumber is string && rcNumber.matches('^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$');
    }
    
    function isValidInsuranceNumber(insuranceNumber) {
      return insuranceNumber is string && insuranceNumber.matches('^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$');
    }
    
    function isValidDate(dateString) {
      return dateString is string && dateString.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }
    
    function isValidDriverVerificationStatus(status) {
      return status in ['pending_verification', 'approved', 'rejected'];
    }
    
    function isValidVehicleDetails(vehicleDetails) {
      return vehicleDetails.keys().hasAll(['vehicleType', 'vehicleNumber', 'vehicleMake', 'vehicleModel', 'vehicleYear', 'vehicleColor', 'licenseNumber', 'licenseExpiry', 'rcNumber', 'insuranceNumber', 'insuranceExpiry']) &&
             isValidVehicleType(vehicleDetails.vehicleType) &&
             isValidVehicleNumber(vehicleDetails.vehicleNumber) &&
             isValidLicenseNumber(vehicleDetails.licenseNumber) &&
             isValidRCNumber(vehicleDetails.rcNumber) &&
             isValidInsuranceNumber(vehicleDetails.insuranceNumber) &&
             isValidDate(vehicleDetails.licenseExpiry) &&
             isValidDate(vehicleDetails.insuranceExpiry) &&
             vehicleDetails.vehicleYear is int && vehicleDetails.vehicleYear >= 2000 && vehicleDetails.vehicleYear <= 2030;
    }

    // Users collection - enhanced security with field validation
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (isOwner(userId) || isAdmin() || 
         // Allow customers to read their own data using roleBasedUID
         (isCustomer() && request.auth.token.roleBasedUID == userId) ||
         // Allow drivers to read their own data using roleBasedUID  
         (isDriver() && request.auth.token.roleBasedUID == userId));
      
      allow create: if isAuthenticated() && 
        isValidUserType() &&
        isOwner(userId) &&
        request.resource.data.keys().hasAll(['name', 'phone', 'userType', 'createdAt']) &&
        isValidPhoneNumber(request.resource.data.phone) &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.userType in ['customer', 'driver'];
      
      // Allow admin users to be created in users collection
      allow create: if isAuthenticated() && 
        isOwner(userId) &&
        request.resource.data.email == request.auth.token.email &&
        request.resource.data.userType == 'admin' &&
        request.resource.data.role == 'super_admin' &&
        request.resource.data.keys().hasAll(['uid', 'email', 'name', 'userType', 'role', 'createdAt']) &&
        isValidEmail(request.resource.data.email);
      
      // TEMPORARY: Allow creation for initial setup (remove after first admin is created)
      allow create: if isAuthenticated() && 
        isOwner(userId) &&
        request.resource.data.userType == 'admin' &&
        request.resource.data.role == 'super_admin' &&
        request.resource.data.keys().hasAll(['uid', 'email', 'name', 'userType', 'role', 'createdAt']);
      
      
      allow update: if isAuthenticated() && (
        // Admin can update anything
        isAdmin() ||
        // Users can update their own basic info
        (isOwner(userId) && 
         request.writeFields.hasOnly(['name', 'phone', 'email', 'updatedAt', 'lastSeen']) &&
         isValidPhoneNumber(request.resource.data.phone) &&
         isValidEmail(request.resource.data.email)) ||
        // Customers can update their customer-specific fields
        (isCustomer() && request.auth.token.roleBasedUID == userId &&
         request.writeFields.hasOnly(['customer', 'updatedAt', 'lastSeen']) &&
         request.resource.data.customer.keys().hasOnly(['name', 'email', 'address', 'preferences', 'addresses', 'paymentMethods', 'emergencyContacts', 'alertHistory', 'profilePhoto'])) ||
        // Drivers can update their driver-specific fields
        (isOwner(userId) && isDriver() &&
         request.writeFields.hasOnly(['driver', 'updatedAt', 'lastSeen']) &&
         request.resource.data.driver.keys().hasOnly(['isOnline', 'isAvailable', 'currentLocation', 'vehicleInfo', 'vehicleDetails', 'status', 'verificationStatus', 'wallet']) &&
         isValidDriverStatus(request.resource.data.driver.status) &&
         (request.resource.data.driver.vehicleDetails == null || isValidVehicleDetails(request.resource.data.driver.vehicleDetails)))
      );
      
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Auth attempts collection - admin only for security
    match /auth_attempts/{attemptId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    // Document verification requests - allow admin access only
    match /documentVerificationRequests/{requestId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Driver documents collection - allow drivers to read their own documents, admin access for all
    match /driverDocuments/{documentId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Driver documents rejections collection - allow drivers to read their own rejections, admin access for all
    match /driverDocumentsRejections/{rejectionId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Driver wallet transactions collection - allow drivers to read their own transactions, admin access for all
    match /driverWalletTransactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Driver points wallets collection - allow drivers to read their own points wallet, admin access for all
    match /driverPointsWallets/{driverId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Driver top-ups collection - real money transactions, admin access only for security
    match /driverTopUps/{topUpId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Points transactions collection - allow drivers to read their own points transactions, admin access for all
    match /pointsTransactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Emergency alerts - allow admin access only
    match /emergencyAlerts/{alertId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Bookings collection - enhanced security with status validation
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        resource.data.customerId == request.auth.uid || 
        resource.data.driverId == request.auth.uid ||
        isAdmin() ||
        (isDriver() && resource.data.status == 'pending' && resource.data.driverId == null)
      );
      
      allow create: if isAuthenticated() && 
        isCustomer() &&
        request.resource.data.customerId == request.auth.uid &&
        request.resource.data.keys().hasAll(['customerId', 'pickup', 'dropoff', 'status', 'createdAt']) &&
        isValidBookingStatus(request.resource.data.status) &&
        isValidPickupDelivery(request.resource.data.pickup, request.resource.data.dropoff);
      
      allow update: if isAuthenticated() && (
        // Admin can update anything
        isAdmin() ||
        // Drivers can update specific fields for their assigned bookings
        (resource.data.driverId == request.auth.uid && isDriver() &&
         request.writeFields.hasOnly(['status', 'timing', 'driver', 'updatedAt']) &&
         isValidBookingStatus(request.resource.data.status)) ||
        // Customers can cancel their own bookings
        (resource.data.customerId == request.auth.uid && isCustomer() &&
         request.writeFields.hasOnly(['status', 'cancellationReason', 'updatedAt']) &&
         request.resource.data.status == 'cancelled')
      );
      
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Chat messages collection - allow participants to read/write
    match /chat_messages/{messageId} {
      allow read: if isAuthenticated() && (
        // Get booking to check participants
        exists(/databases/$(database)/documents/bookings/$(resource.data.bookingId)) &&
        (
          get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.customerId == request.auth.uid ||
          get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.driverId == request.auth.uid ||
          isAdmin()
        )
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['bookingId', 'senderId', 'senderType', 'message', 'timestamp']) &&
        request.resource.data.senderType in ['customer', 'driver'];
      
      allow update: if isAuthenticated() && 
        resource.data.senderId == request.auth.uid &&
        request.writeFields.hasOnly(['read', 'updatedAt']);
      
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Driver locations - allow drivers to read/write their own location, admins full access
    match /driverLocations/{driverId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == driverId || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
    }
    
    // Driver assignments - allow drivers to read their own assignments, admins full access
    match /driverAssignments/{assignmentId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Trip tracking - allow drivers and customers to read their own trips, admins full access
    match /tripTracking/{tripId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         resource.data.customerId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
      // Allow drivers to update trip status
      allow update: if request.auth != null && 
        (resource.data.driverId == request.auth.uid && 
         request.auth.token.userType == 'driver' &&
         request.writeFields.hasOnly(['status', 'location', 'updatedAt']));
    }
    
    // Pickup verifications - allow drivers to create/read their own verifications, admins full access
    match /pickupVerifications/{verificationId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         resource.data.customerId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.driverId == request.auth.uid &&
        request.resource.data.keys().hasAll(['bookingId', 'driverId', 'customerId', 'verifiedAt', 'status']) &&
        request.auth.token.userType == 'driver';
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Delivery verifications - allow drivers to create/read their own verifications, admins full access
    match /deliveryVerifications/{verificationId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         resource.data.customerId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.driverId == request.auth.uid &&
        request.resource.data.keys().hasAll(['bookingId', 'driverId', 'customerId', 'deliveredAt', 'status']) &&
        request.auth.token.userType == 'driver';
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Photo verifications - allow drivers to create/read their own verifications, admins full access
    match /photoVerifications/{verificationId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         resource.data.customerId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.driverId == request.auth.uid &&
        request.resource.data.keys().hasAll(['bookingId', 'driverId', 'customerId', 'photoType', 'photoUrl', 'status']) &&
        request.auth.token.userType == 'driver';
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin') &&
        request.writeFields.hasOnly(['status', 'verifiedAt', 'verifiedBy', 'updatedAt']);
    }
    
    // Support tickets - allow users to create and read their own tickets, admins full access
    match /supportTickets/{ticketId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userType', 'subject', 'description', 'category', 'priority', 'status', 'createdAt']);
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Issue reports - allow users to create and read their own reports, admins full access
    match /issueReports/{issueId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userType', 'issueType', 'description', 'priority', 'status', 'createdAt']);
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Support messages - allow users to create and read their own messages, admins full access
    match /support_messages/{messageId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userType', 'message', 'category', 'priority', 'status', 'createdAt']);
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // FAQ collection - public read access, admin write access
    match /faqs/{faqId} {
      allow read: if resource.data.isActive == true;
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // FAQ categories - public read access, admin write access
    match /faqCategories/{categoryId} {
      allow read: if resource.data.isActive == true;
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // FAQ feedback - public create access
    match /faqFeedback/{feedbackId} {
      allow create: if true; // Public feedback submission
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Feedback collection - user and admin access
    match /feedback/{feedbackId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'userType', 'rating', 'category', 'createdAt']);
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // App settings - public read access for contact info, admin write access
    match /appSettings/{settingId} {
      allow read: if settingId == 'contactInfo';
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // System health - allow admin access only
    match /systemHealth/{healthId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Admin settings - allow admin access only
    match /adminSettings/{settingId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Admin users collection - allow admin user management
    match /adminUsers/{userId} {
      // Allow admin users to read admin users (for admin management)
      allow read: if request.auth != null && isAdminUser();
      
      // Allow authenticated users to create their own admin profile
      // This supports both client-side and backend admin creation
      allow create: if request.auth != null && 
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.email == request.auth.token.email &&
        request.resource.data.role == 'super_admin' &&
        request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'role', 'permissions', 'createdAt']) &&
        isValidEmail(request.resource.data.email);
      
      // Allow admin users to update their own profile
      allow update: if request.auth != null && 
        (request.auth.uid == userId || isSuperAdmin()) &&
        request.writeFields.hasOnly(['displayName', 'lastLogin', 'updatedAt', 'permissions']);
      
      // Allow super admins to delete admin users
      allow delete: if request.auth != null && isSuperAdmin();
    }
    
    // File uploads - allow admin access only
    match /fileUploads/{uploadId} {
      allow read, write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Driver verification status - allow drivers to read their own status, admin access for all
    match /driverVerificationStatus/{driverId} {
      allow read: if request.auth != null && 
        (request.auth.uid == driverId || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Driver data entries - allow drivers to create/read their own entries, admin access for all
    match /driverDataEntries/{entryId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        request.resource.data.driverId == request.auth.uid &&
        request.resource.data.keys().hasAll(['driverId', 'vehicleDetails', 'status', 'submittedAt']) &&
        isValidVehicleDetails(request.resource.data.vehicleDetails) &&
        isValidDriverVerificationStatus(request.resource.data.status);
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin') &&
        request.writeFields.hasOnly(['status', 'rejectionReason', 'reviewedAt', 'reviewedBy', 'updatedAt']) &&
        isValidDriverVerificationStatus(request.resource.data.status);
    }
    
    // Payments collection - secure payment data access
    match /payments/{paymentId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.customerId || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
    }

    // Ratings collection - secure rating data access
    match /ratings/{ratingId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.driverId ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.customerId || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
    }

    // Refunds collection - secure refund data access
    match /refunds/{refundId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.refundedBy || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.refundedBy || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
    }

    // Commission transactions - driver and admin access
    match /commissionTransactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Recharge transactions - driver and admin access
    match /rechargeTransactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.driverId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Notifications collection - user-specific access
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin') &&
        request.resource.data.keys().hasAll(['userId', 'type', 'title', 'message', 'createdAt']) &&
        isValidNotificationType(request.resource.data.type);
    }

    // Orders collection - customer, driver, and admin access
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.driverId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        (request.resource.data.customerId == request.auth.uid || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow update: if request.auth != null && (
        request.auth.token.role == 'admin' || 
        request.auth.token.userType == 'admin' ||
        (resource.data.driverId == request.auth.uid && 
         request.writeFields.hasOnly(['status', 'updatedAt']))
      );
    }

    // Drivers collection - driver and admin access
    match /drivers/{driverId} {
      allow read: if request.auth != null && 
        (request.auth.uid == driverId || 
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow write: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }

    // Support collection - customer, driver, and admin access
    match /support/{supportId} {
      allow read: if request.auth != null && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.driverId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow create: if request.auth != null && 
        (request.resource.data.customerId == request.auth.uid || 
         request.resource.data.driverId == request.auth.uid ||
         request.auth.token.role == 'admin' || 
         request.auth.token.userType == 'admin');
      allow update: if request.auth != null && 
        (request.auth.token.role == 'admin' || request.auth.token.userType == 'admin');
    }
    
    // Work slots collection - new gig slot system
    match /workSlots/{slotId} {
      allow read: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid || 
        isAdmin() ||
        (isDriver() && resource.data.status in ['available', 'booked'])
      );
      
      allow create: if isAuthenticated() && (
        isAdmin() ||
        (isDriver() && request.resource.data.driverId == request.auth.uid &&
         request.resource.data.keys().hasAll(['slotId', 'startTime', 'endTime', 'label', 'status', 'driverId', 'createdAt', 'updatedAt']) &&
         request.resource.data.status in ['available', 'booked', 'completed'] &&
         isValidWorkSlotStatus(request.resource.data.status))
      );
      
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (resource.data.driverId == request.auth.uid && isDriver() &&
         request.writeFields.hasOnly(['status', 'updatedAt']) &&
         request.resource.data.status in ['available', 'booked', 'completed'] &&
         isValidWorkSlotStatus(request.resource.data.status))
      );
      
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
