rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.role == 'super_admin' || 
         request.auth.token.appType == 'admin');
    }
    
    function isDriver() {
      return request.auth != null && 
        (request.auth.token.role == 'driver' || 
         request.auth.token.appType == 'driver');
    }
    
    function isCustomer() {
      return request.auth != null && 
        (request.auth.token.role == 'customer' || 
         request.auth.token.appType == 'customer');
    }
    
    // Universal ownership check - handles both Firebase UID and role-based UID
    function isOwner(userId) {
      return request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.roleBasedUID == userId);
    }
    
    // Driver documents - NEW structured path
    match /drivers/{driverId}/documents/{documentType}/{document=**} {
      allow read: if isAuthenticated() && 
        ((isDriver() && isOwner(driverId)) || isAdmin());
      allow write: if isAuthenticated() && 
        ((isDriver() && isOwner(driverId)) || isAdmin());
    }
    
    // Driver documents - LEGACY path (TEMPORARILY PERMISSIVE)
    match /driver-documents/{userId}/{document=**} {
      allow read: if isAuthenticated() && isDriver();
      allow write: if isAuthenticated() && isDriver();
    }
    
    // User files (profile photos, documents, etc.) - NEW path used by backend
    match /users/{userId}/{allFiles=**} {
      allow read: if isAuthenticated() && 
        (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && 
        (isOwner(userId) || isAdmin());
    }
    
    // Profile photos - universal access (LEGACY path)
    match /profiles/{userId}/{document=**} {
      allow read: if isAuthenticated() && 
        (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && 
        (isOwner(userId) || isAdmin());
    }
    
    // Customer documents
    match /customers/{customerId}/documents/{documentType}/{document=**} {
      allow read: if isAuthenticated() && 
        ((isCustomer() && isOwner(customerId)) || isAdmin());
      allow write: if isAuthenticated() && 
        ((isCustomer() && isOwner(customerId)) || isAdmin());
    }
    
    // Verification photos (for bookings)
    // âœ… FIX: Only allow participants of the booking to access verification photos
    match /verifications/{bookingId}/{document=**} {
      // Only allow participants of the booking to read
      allow read: if isAuthenticated() && (
        isAdmin() ||
        // Check if user is customer or driver of this booking
        (firestore.exists(/databases/(default)/documents/bookings/$(bookingId)) &&
         (firestore.get(/databases/(default)/documents/bookings/$(bookingId)).data.customerId == request.auth.uid ||
          firestore.get(/databases/(default)/documents/bookings/$(bookingId)).data.driverId == request.auth.uid))
      );
      
      // Only allow driver assigned to booking to write
      allow write: if isAuthenticated() && (
        isAdmin() ||
        (isDriver() &&
         firestore.exists(/databases/(default)/documents/bookings/$(bookingId)) &&
         firestore.get(/databases/(default)/documents/bookings/$(bookingId)).data.driverId == request.auth.uid)
      );
    }
    
    // Public documents - read-only for all, write for admin only
    match /public/{document=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }
    
    // Admin access to all documents (catch-all rule - must be last)
    match /{allPaths=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
  }
}
